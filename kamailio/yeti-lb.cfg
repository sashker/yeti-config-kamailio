#---------- Kamailio dispatcher module ------
loadmodule "dispatcher.so"
modparam("dispatcher","flags",2)
modparam("dispatcher", "list_file", "/etc/yeti-configs/kamailio/dispatcher.list")
modparam("dispatcher","dst_avp","$avp(dispatch_dst)")
modparam("dispatcher","grp_avp","$avp(dispatch_grp)")
modparam("dispatcher","cnt_avp","$avp(dispatch_cnt)")
modparam("dispatcher", "sock_avp", "$avp(dispatch_sock)")
modparam("dispatcher","ds_ping_method","OPTIONS")
modparam("dispatcher","ds_ping_from","sip:ping@MY_HOSTNAME")
modparam("dispatcher","ds_ping_interval",30)
modparam("dispatcher","ds_probing_mode",1)
modparam("dispatcher","ds_probing_threshold", 2)
modparam("dispatcher","ds_ping_reply_codes", "class=2;code=404");

## Load Balance for SBC nodes
route[LOAD_BALANCE] {
	remove_hf("X-ORIG-IP");
	append_hf("X-ORIG-IP: $si\r\n");

	remove_hf("X-ORIG-PORT");
	append_hf("X-ORIG-PORT: $sp\r\n");

	remove_hf("X-ORIG-PROTO");
	if($proto=="udp") {
	        append_hf("X-ORIG-PROTO: 1\r\n");
	} else if ($proto=="tcp") {
		append_hf("X-ORIG-PROTO: 2\r\n");
	} else if ($proto=="tls") {
                append_hf("X-ORIG-PROTO: 3\r\n");
	} else if ($proto=="sctp") {
                append_hf("X-ORIG-PROTO: 4\r\n");
	}

	if(ds_select_dst("GRP_ID", "BALANCE_ALG")) {
		xlog("L_NOTICE", "Nexthop for $si:  dst: '$avp(dispatch_dst)' grp: '$avp(dispatch_grp)' cnt: '$avp(dispatch_cnt)'\n");
		t_on_reply("LB_REPLY");
		t_on_failure("LB_FAIL");
		if(!t_relay()) {
			sl_reply_error();
			xlog("L_ERR", "### ERROR ### t_relay: method <$rm> : URI=$ru F=$fu T=$tu IP=$si");
		} else {
			xlog("L_DBG", "### ->MGW node: RU=$rU  dst_avp=$avp(dispatch_dst)\n");
		}
	} else {
		xlog("L_ERR", "No Dispatcher Destination - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		sl_send_reply("500", "Internal Server Error - No destination");
	}
	exit;
}

onreply_route[LB_REPLY] {
	xlog("L_DBG", "LB Reply - S=$rs D=$rr F=$fu T=$tu IP=$si ID=$ci\n");
}

# Handles failure of INVITE forwarding
failure_route[LB_FAIL] {

	# check first for cancelled transactions
	# we get here because the invite will have 487 reply code
	if(t_is_canceled()){
		xlog("L_DBG","Transaction was cancelled\n");
		exit;
	}

	xlog("L_NOTICE","\t# INVITE # Failure route (Dispatcher), $rU code [$T_reply_code]\n");


	# next destination only if this proxy timeouts
	# time-out from downstream means destination was ok, ringing
	# but no answer
	if((!t_any_replied()) && t_check_status("408")){
		#- xlog("L_ERR","Internally generated 408 from $T_rpl($si), flagging $avp(dispatch_dst) as invalid.\n");
		#- ds_mark_dst();
		xlog("L_ERR","$ci|end|Internally generated 408, flagging $avp(dispatch_dst) for probing.\n");
		ds_mark_dst("p");

		# relay again if we have new destination
		if(ds_next_dst()){
			t_on_reply("LB_REPLY");
			t_on_failure("LB_FAIL");
			t_relay();
			xlog("L_ERR", "$ci|end|tRerouting to $rU@$avp(dispatch_dst)");
			exit;
		} else {
			# let the reply go upstream - it is default action
			xlog("L_ERR", "$ci|end|No Next Dispather Destination - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			exit;
		}
	}
}

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
